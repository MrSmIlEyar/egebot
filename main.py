from aiogram import Bot, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile, InputMediaPhoto
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import markup
from sdamgia import SdamGIA
import random
import requests
import json
import emoji
import convertapi
import pyrebase

TOKEN = '5018669230:AAG7aLb8pxho0Cfnp8zd-sjNf9Gxtz_bcP4'

sdamgia = SdamGIA()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        types.BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
        types.BotCommand("rus", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"),
        types.BotCommand("inf", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"),
        types.BotCommand("phys", "–§–∏–∑–∏–∫–∞"),
        types.BotCommand("chem", "–•–∏–º–∏—è"),
        types.BotCommand("bio", "–ë–∏–æ–ª–æ–≥–∏—è"),
        types.BotCommand("soc", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"),
        types.BotCommand("his", "–ò—Å—Ç–æ—Ä–∏—è"),
        types.BotCommand("lit", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"),
        types.BotCommand("geo", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")

    ])


@dp.message_handler(commands='start')
async def command_start(message: types.Message):
    firebaseConfig = {
        'apiKey': "AIzaSyD2FYwRp4O_12HTtkKMnmUJLBHvJ4cgaEE",
        'authDomain': "egebot-79552.firebaseapp.com",
        'databaseURL': "https://egebot-79552-default-rtdb.europe-west1.firebasedatabase.app",
        'projectId': "egebot-79552",
        'storageBucket': "egebot-79552.appspot.com",
        'messagingSenderId': "878336561547",
        'appId': "1:878336561547:web:547ef57a8c1bf2c0a19f8e",
        'measurementId': "G-PJ20VQMKJN"
    }
    firebase = pyrebase.initialize_app(firebaseConfig)
    username = message.from_user['username']
    db = firebase.database()
    a = db.get('hGxeiEIvUIeQeurIKqjuK7KWsBGtq7LqHa6HwTUV')
    logins = []
    for i in a.val():
        logins.append(i)
    if username not in logins:
        data = {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á": "0"}
        db.child(f"{username}").set(data)
    await set_default_commands(dp)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user["username"]}, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –ï–ì–≠.',
                         reply_markup=markup.mainMenu)


@dp.message_handler(commands='help')
async def help(message: types.Message):
    await message.answer('–ë–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠')


@dp.message_handler(commands='profile')
async def profile(message: types.Message):
    auth = 'hGxeiEIvUIeQeurIKqjuK7KWsBGtq7LqHa6HwTUV'
    url = 'https://egebot-79552-default-rtdb.europe-west1.firebasedatabase.app/.json'
    username = message.from_user["username"]
    supported_user = username.replace('.', '-')
    request = requests.get(url + '?auth=' + auth)
    data = request.json()
    print(data)
    quantify = data[supported_user]['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á']
    await message.answer(emoji.emojize('üë§') + '–ü—Ä–æ—Ñ–∏–ª—å:' + '\n\n' +
                         '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + username + '\n' +
                         '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ' + quantify, reply_markup=markup.profile)


@dp.message_handler(commands='math')
async def math(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'][1])


@dp.message_handler(commands='rus')
async def rus(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'][1])


@dp.message_handler(commands='inf')
async def inf(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'][1])


@dp.message_handler(commands='phys')
async def phys(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–§–∏–∑–∏–∫–∞'][1])


@dp.message_handler(commands='chem')
async def chem(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–•–∏–º–∏—è'][1])


@dp.message_handler(commands='bio')
async def math(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–ë–∏–æ–ª–æ–≥–∏—è'][1])


@dp.message_handler(commands='geo')
async def geo(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–ì–µ–æ–≥—Ä–∞—Ñ–∏—è'][1])


@dp.message_handler(commands='soc')
async def soc(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'][1])


@dp.message_handler(commands='lit')
async def lit(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'][1])


@dp.message_handler(commands='his')
async def lit(message: types.Message):
    await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d['–ò—Å—Ç–æ—Ä–∏—è'][1])


@dp.message_handler()
async def main_dialog(message: types.Message):
    auth = 'hGxeiEIvUIeQeurIKqjuK7KWsBGtq7LqHa6HwTUV'
    url = 'https://egebot-79552-default-rtdb.europe-west1.firebasedatabase.app/.json'
    if message.text in markup.d.keys():
        await message.answer('–í—Å–µ –∑–∞–¥–∞—á–∏', reply_markup=markup.d[message.text][1])
    elif message.text in markup.testList:
        await test_by_category(message)
    elif message.text == '–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞':
        await message.answer('–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤', reply_markup=markup.subjectsMenu)
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup.mainMenu)
    elif message.text == '–ü—Ä–æ—Ñ–∏–ª—å':
        username = message.from_user["username"]
        supported_user = username.replace('.', '-')
        request = requests.get(url + '?auth=' + auth)
        data = request.json()
        print(data)
        quantify = data[supported_user]['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á']
        await message.answer(emoji.emojize('üë§') + '–ü—Ä–æ—Ñ–∏–ª—å:' + '\n\n' +
                             '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + username + '\n' +
                             '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ' + quantify, reply_markup=markup.profile)
    elif message.text == '–ü–æ–º–æ—â—å':
        await message.answer('–ë–æ—Ç –¥–ª—è –ï–ì–≠')


@dp.message_handler()
async def test_by_category(message: types.Message):
    for i in markup.d.keys():
        if message.text.split()[1] == i[:3]:
            markuprepl = ''
            subject = markup.d[i][0]
            id = message.text.split()[0]
            print(sdamgia.get_catalog(subject)[int(id) - 1])
            s = random.choice(sdamgia.get_catalog(subject)[int(id) - 1]['categories'])
            categoryTests = sdamgia.get_category_by_id(subject, s['category_id'])
            test = sdamgia.get_problem_by_id(subject, random.choice(categoryTests))
            print(test)
            # await message.answer(test['condition']['text'])
            try:
                img = requests.get(test['condition']['images'][0])
                img_file = open('C:/Users/arosl/PycharmProjects/egebot/img.svg', 'wb')
                img_file.write(img.content)
                img_file.close()
                convertapi.api_secret = 'PY8ZVrPVo6V5oog1'
                convertapi.convert('png', {
                    'File': 'img.svg'
                }, from_format='svg').save_files('my.png')
                photo = InputFile('my.png')
                # k = sdamgia.get_problem_by_id(subject, random.choice(categoryTests), path_to_img='my.jpg',img='pyppeteer')
                # photo = InputFile('my.jpg')
                await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=test['condition']['text'])
            except Exception:
                await message.answer(test['condition']['text'])


executor.start_polling(dp, skip_updates=True)
